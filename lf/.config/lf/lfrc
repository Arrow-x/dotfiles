# Basic Settings
set hidden true
set ignorecase true
set icons true
set relativenumber true
set cursorpreviewfmt "\033[7;2m"

set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already

# Custom Functions
cmd mkdir %{{
	printf "Directory Name: "
	read -r ans
	mkdir -p "$ans"
	lf -remote "send select \"$ans\""
}}

cmd mkfile %{{
	printf "File Name: "
	read ans
	touch "$ans"
	lf -remote "send select \"$ans\""
}}

# Custom Functions
cmd setwallpaper %set_bg "$f" >/dev/null 2>&1

# Archive some files
cmd archive ${{
	ext=$(printf "7z\nzip\ntar.gz" | fzf)
	if [ -z "$ext" ]; then
		exit
	fi
	printf "Name of the archive: "
	read -r ans
	case "$ext" in
		7z)
			set -f
			firejail 7z a "$ans" $fx ;;
		zip)
			set -f
			firejail zip -r "$ans".zip $fx ;;
		tar.gz)
			set -f
			firejail tar czf "$ans".tar.gz $fx ;;
	esac
}}

# unarchive bindings
cmd unarchive ${{
	for arc in $fx; do
		case "$arc" in
			*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) firejail tar xjvf "$arc" ;;
			*.tar.gz|*.tgz) firejail tar xzvf "$arc" ;;
			*.tar.xz|*.txz) firejail tar xJvf "$arc" ;;
			*.zip) firejail unzip "$arc" ;;
			*.rar) firejail unrar x "$arc" ;;
			*) firejail 7z x "$arc" ;;
		esac
	done
}}

cmd open %{{
	case "$(mimetype -M -b "$f")" in
		application/x-sharedlib | application/x-shellscript | application/x-executable | application/x-object)
			"$f" >/dev/null 2>&1 & ;;
		*)
			mimeopen -n "$f" >/dev/null 2>&1 & ;;
	esac
}}

# Trash bindings
cmd trash ${{
	files=$(printf "$fx" | tr '\n' ';')
	while [ "$files" ]; do
		file=${files%%;*}
		trash-put -v "$(basename "$file")"
		if [ "$files" = "$file" ]; then
			files=''
		else
			files="${files#*;}"
		fi
	done
}}

cmd restore_trash ${{
	trash-restore
}}

cmd remove %{{
	rm -rf $fx
}}

cmd bulkrenamevimv ${{
	vimv --git -- $fx
	lf -remote "send $id load"
	lf -remote "send $id unselect"
}}

cmd chmod_plus_x %{{
	chmod +x $fx
	lf -remote "send $id reload"
}}

cmd chmod_minus_x %{{
	chmod -x $fx
	lf -remote "send $id reload"
}}

cmd paste-overwrite %{{
	mode=$(head -1 ~/.local/share/lf/files)
	list=$(sed 1d ~/.local/share/lf/files)
    if [ $mode = 'copy' ]; then
        cp -r $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd link %{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	if [ "$#" -lt 1 ]; then
		lf -remote "send $id echo no files to link"
		exit 0
	fi
	case "$mode" in
			# symbolically copy mode is indicating a soft link
		copy) ln -sr -t . -- "$@" ;;
			# while a move mode is indicating a hard link
		move) ln -t . -- "$@" ;;
	esac
	# rm ~/.local/share/lf/files
	# lf -remote "send clear"
}}

cmd full_size %{{
	du -sh $fx
}}

cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx
cmd dragon_cp %dragon_cp
cmd dragon_mv %dragon_mv
cmd dragon_download %dragon_download -lf
cmd lazygit $lazygit
cmd z_shell $zsh

# Remove some defaults
map m
map gh
# map o
map "'"
map '"'
map d
map w
map r
map p
  
map rA :rename; cmd-end # at the very end
map rc push rA<c-u> # new rename
map rI :rename; cmd-home # at the very beginning
map re :rename # before extension
map ra :rename; cmd-right # after extension

map <enter> shell # use enter for shell commands
map ` !true # show the result of execution of previous commands

# execute current file (must be executable)
# map x $$f
map X !$f &
map P :link
# Bindings
# Dragon Mapping
map drr dragon
map drs dragon-stay
map dri dragon-individual
map drm dragon_mv
map drc dragon_cp
map drl dragon_download

map dd trash
# map dD remove
map dR restore_trash
map ds full_size

map aa archive
map au unarchive

map mx chmod_plus_x
map mX chmod_minus_x
map mt tagfiles $fx
map md mkdir
map mf mkfile
map mw setwallpaper
map mg lazygit
map ~ z_shell


# Basic Functions
map . set hidden!
map pp paste
map po paste-overwrite
map x cut
map y copy
map R reload
map C clear
map b bulkrenamevimv


# Movement
map ghh cd /home/arrowx
map ghd cd /home/arrowx/Downloads
map ghp cd /home/arrowx/Public
map ghg cd /home/arrowx/gallery-dl
map ghv cd /home/arrowx/Videos
map ghc cd /home/arrowx/.config
map glb cd /home/arrowx/.local/bin
map gls cd /home/arrowx/.local/share
map glt cd /home/arrowx/.local/state
map gfd cd /home/arrowx/File/Documents
map gff cd /home/arrowx/File
map gfs cd /home/arrowx/File/Software
map gfh cd /home/arrowx/File/Homework/H-Games
map gfp cd /home/arrowx/File/Projects
map gft cd /home/arrowx/File/Tutorials
map gm cd /run/media/arrowx/

map grr cd /home/arrowx/File/Examples\ and\ Refrences
map gra cd /home/arrowx/File/Examples\ and\ Refrences/AnimeArt/Random/
map grp cd /home/arrowx/File/Examples\ and\ Refrences/pixel\ art
map grn cd /home/arrowx/File/Examples\ and\ Refrences/Cool\ 3d/NPR
map grc cd /home/arrowx/File/Examples\ and\ Refrences/Cool\ 3d

set previewer /home/arrowx/.config/lf/previewer.sh
set cleaner /home/arrowx/.config/lf/clear_img.sh
